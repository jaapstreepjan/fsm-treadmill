/*!

\page secDesign Software design

\section secArch Architecture subsystems view

A CVM device has several *subsystems* (software API of hardware):
- Finite State Machine
  - state_t FSM_EventHandler(const state_t state, const event_t event);
  - void    FSM_FlushEnexpectedEvents(const bool flush);
  - void    FSM_AddState(const state_t state, const state_funcs_t *funcs);
  - void    FSM_AddTransition(const transition_t *transition);
  - void    FSM_AddEvent(const event_t event);
  - event_t FSM_GetEvent(void);
  - event_t FSM_WaitForEvent(void);
  - event_t FSM_PeekForEvent(void);
  - bool    FSM_NoEvents(void);
  - uint8_t FSM_NofEvents(void);

- Display
  - void DSPinitialise(void);
  - void DSPclear(void);
  - void DSPclearLine(int row);
  - void DSPshowDisplay(void);
  - void DSPshow(const char text[], int row);
  - void DSPshowDelete(const char text[], int row);
  - void DSPdebugSystemInfo(const char text[]);
  - void DSPsimulationSystemInfo(const char text[]);
  - void DSPshowSystemError(const char text[]);

- Keyboard
  - void KYBinitialise(void);
  - void KYBclear(void);
  - char KYBgetchar(void);
  - int KYBgetint(int ifWrongValue);
  - double KYBgetdouble(double ifWrongValue);

- TUI *Textual User Interface* (terminal user interface), 
  uses the Display and Keyboard API
  - void TUIinitialise(void);
  - int TUIsimulationSystemInputYN(const char questionText[]);
  - char TUIsimulationSystemInputChar(const char text[], const char chrs[]);
  - int TUIsimulationSystemInputInteger(const char text[], int min, int max);

- FSM Initialisation and exit code

  - void S_Init_onEntry(void);
  - void S_Exit_onEntry(void);

- FSM state machine for controlling the Simple example, is executed by main()

  - void    FSM_AddEvent(const event_t event);
  - event_t FSM_GetEvent(void);
  - event_t FSM_WaitForEvent(void);

The arrows are code dependency relations (uses relations).
In C code these are the \#include dependencies.

\section secArchitecture Architecture view
The UML diagram describes a layered architecture for a treadmill. The layers are:
- User Interface Layer (UI): This layer contains the screen and buttons that allow the user to interact with the treadmill.
- System Control Layer (SCL): This layer contains a finite state machine (FSM) that controls the behavior of the treadmill based on user inputs and sensor readings.
- Subsystems Layer (SL): This layer contains the subsystems that make up the treadmill, such as the band speed motor, incline motor, and emergency brake.
- Hardware Abstraction Layer (HAL): This layer provides an abstracted interface to the hardware, such as the hardware IO.
The FSM in the SCL layer communicates with the subsystems in the SL layer, and the subsystems in turn communicate with the hardware IO in the HAL layer. The screen and buttons in the UI layer also communicate with the hardware IO in the HAL layer.
\image html "images/treadmill-architecture.png" "Treadmill architecture" width=600px

\section secState State machine view

This UML code and diagram describes a state chart for a treadmill machine. It shows the different states the machine can be in, and the events that can trigger a transition between states. For example, when the machine is turned on, it goes into the S_INIT state. If the user then starts the machine, it transitions to the S_STANDBY state. From there, the user can either start running, which takes the machine to the S_DEFAULT state, or enter diagnostics mode, which takes it to the S_DIAGNOSTICS state.
Each state is described by a set of actions that the machine performs while in that state. For example, in the S_DEFAULT state, the machine applies a brake to the degree of tilt and applies a constant power to the speed motor. It also allows changes to the tilt and speed to be made.
Overall, this state chart describes the behavior of a treadmill machine and the different actions it can perform based on user input and other events.
\image html "images/treadmill-state-chart.png" "Treadmill state chart" width=600px


\verbatim event [condition] / action() 
\endverbatim

- if an event occurs and the condition is satisfied, 
  then the action will be executed and the state transition will occur.
- event names are in uppercase, prefixed by **E_**.
- the action is the name of one or more (short) C functions without parameters 
  or only the important ones, prefixed by the abbreviated name of the related 
  subsystem.  
- all the names in the diagrams should be used in the C code.


*/
